package bostonchildcare.Controller;

import java.awt.Color;
import java.awt.Component;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.bson.Document;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.QueryBuilder;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import bostonchildcare.Model.School_Model;
import bostonchildcare.Model.Student_Model;
import bostonchildcare.View.Enrolled_Students_View;
//import bostonchildcare.View.Enrolled_Students_View.MyTableModel;

public class Enrolled_Student_Controller {

	class MyTableModel extends AbstractTableModel {
		   // holds the strings to be displayed in the column headers of our table
		   final String[] columnNames = {"First Name","Last Name","Age","Parent's Name","Contact"};
		  
		   // holds the data types for all our columns
		   final Class[] columnClasses = {String.class, String.class, Integer.class, String.class,String.class};
		  
		   // holds our data
		   final Vector data = new Vector();
		   
		   // adds a row
		   public void addStudent(Student_Model m) {
		      data.addElement(m);
		      fireTableRowsInserted(data.size()-1, data.size()-1);
		   }
		  
		   public int getColumnCount() {
		      return columnNames.length;
		   }
		          
		   public int getRowCount() {
		      return data.size();
		   }
		  
		   public String getColumnName(int col) {
		      return columnNames[col];
		   }
		  
		   public Class getColumnClass(int c) {
		      return columnClasses[c].getClass();
		   }
		  
		   public Object getValueAt(int row, int col) {
		      Student_Model stud = (Student_Model) data.elementAt(row);
		      if (col == 0)      return stud.getFname();
		      else if (col == 1) return stud.getLname();
		      else if (col == 2) return stud.getAge();
		      else if (col == 3) return stud.getPname();
		      else if (col == 4) return stud.getContact();
		      else return null;
		   }
		  
		   public Object getValueAtRow(int row) {
		      Student_Model stu = (Student_Model) data.elementAt(row);
		      return stu;
		   }
		  
		   public boolean isCellEditable(int row, int col) {
		      return false;
		   }
		}
		  
		class MyTableCellRenderer extends DefaultTableCellRenderer {
		   public Component getTableCellRendererComponent(
		            JTable table, Object value, boolean isSelected,
		            boolean hasFocus, int row, int column)
		   {
		      MyTableModel mytm = (MyTableModel) table.getModel();
		      Student_Model stud = (Student_Model) mytm.getValueAtRow(row);
		  
		      if (stud.getAge() > 7) {
		         setBackground(Color.green);
		      }
		      else {
		         setBackground(Color.red);
		      }
		  
		      return super.getTableCellRendererComponent(table, value, isSelected,
		                                                 hasFocus, row, column);
		   }
		}

private static final Enrolled_Student_Controller instance = new Enrolled_Student_Controller();
private Enrolled_Students_View esview;
private StudentTeacher_Office_Controller st_contr;
private Vaccination_Controller v_contr;
private Login_Controller lcontr;

private Enrolled_Student_Controller() {
	this.esview = Enrolled_Students_View.get_instance();
	load_table(esview.getAge_cat_combo().getSelectedItem().toString());
}

public static Enrolled_Student_Controller get_instance() {
	return instance;
}

public void initController() {
	esview.setVisible(true);
	String age_cat = esview.getAge_cat_combo().getSelectedItem().toString();
	esview.getAge_cat_combo().addActionListener(l->load_table(esview.getAge_cat_combo().getSelectedItem().toString()));
	esview.getBack_btn().addActionListener(l->go_back());
	
	esview.getBtnEnterVaccinationDetails().addActionListener(l->nav_vaccination_details());
}

public void nav_vaccination_details() {
	esview.setVisible(false);
	JTable table = esview.getTable();
	int selected_row = table.getSelectedRow();
	String fname = (String)table.getValueAt(selected_row, 0);
	String lname = (String)table.getValueAt(selected_row, 1);
	v_contr.get_instance().initController(fname,lname);
}

public void load_table(String age_cat) {
	MongoClient client = new MongoClient("localhost",27017);
	DB db = client.getDB("Daycare");
	DBCollection coll = db.getCollection("Student");
	DBObject query = QueryBuilder.start("Section").is("").and("Age Category").is(age_cat).get();
	DBCursor cursor = coll.find(query);
	JTable tab = esview.getTable();
	String[] column = {"First Name","Last Name","Age","Parent's Name","Contact"};
	MyTableModel m = new MyTableModel();
	tab.setModel(m);
	
	for (int i =0; i<m.getColumnCount();i++) {
        tab.setDefaultRenderer(tab.getColumnClass(i), new MyTableCellRenderer());
     }
	
	DefaultTableModel model =  new DefaultTableModel(column,0);
	while(cursor.hasNext()) {
		DBObject obj = cursor.next();
		String fname = (String)obj.get("First Name");
		String lname = (String)obj.get("Last Name");
		int age = (Integer)obj.get("Age");
		String pname = (String)obj.get("Parent's Name");
		String contact = (String)obj.get("Contact");
			/*
			 * for (Student_Model stu :
			 * School_Model.get_instance().getEnrolled_student_list()) {
			 * if(stu.getFname().equals(fname)&stu.getLname().equals(lname)) {
			 * m.addStudent(stu); } }
			 */
		model.addRow(new Object[] {fname,lname,age,pname,contact});	
		
		//model.setRowColour(1, Color.YELLOW);
		
	}
}

public void go_back() {
	esview.setVisible(false);
	st_contr.get_instance().initController();
}

public void logout() {
	esview.setVisible(false);
	lcontr.get_instance().initController();
}

}
